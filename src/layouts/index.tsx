import Icon, {
  DesktopOutlined,
  DownCircleOutlined,
  UserOutlined,
  SettingFilled,
} from '@ant-design/icons';
import { Avatar, Button, Drawer, Input, Layout, Menu } from 'antd';
import React, { useRef, useState } from 'react';
import { connect, GlobalLayoutModelState, IRouteComponentProps } from 'umi';
import './style.less';
import SettingBtn from '@/components/SettingBtn';
const { Header, Footer, Sider, Content } = Layout;
const { Search } = Input;

const GlobalLayout = ({
  children,
  location,
  route,
  history,
  match,
  globalLayout,
  dispatch,
}: IRouteComponentProps) => {
  console.log(globalLayout);

  const [visible, setVisible] = useState(false);
  const showDrawer = () => {
    setVisible(true);
  };
  const onClose = () => {
    setVisible(false);
  };

  const inputRef: any = useRef();

  const bannerSvg = () => {
    const size = '40px';
    return (
      <svg width={size} height={size} viewBox="0 0 200 200" version="1.1">
        <title>头像</title>
        <desc>Created with Sketch.</desc>
        <g
          id="页面-1"
          stroke="none"
          strokeWidth="1"
          fill="none"
          fillRule="evenodd"
        >
          <g id="画板" transform="translate(-87.000000, -56.000000)">
            <g id="头像" transform="translate(87.000000, 56.000000)">
              <rect
                id="矩形"
                fill="#1F7688"
                x="0"
                y="0"
                width="200"
                height="200"
              ></rect>
              <path
                d="M144.145477,57.9565663 C149.995927,58.8747735 154.063292,64.2578805 153.351132,70.2152204 L153.306943,70.5289232 L150.349057,89.3791718 C153.397544,95.4795448 155,102.111262 155,108.940747 C155,110.821942 154.879346,112.676805 154.6446,114.499848 L164.031903,114.5 L164.199529,114.505823 C165.518884,114.60282 166.531903,115.688665 166.531903,117 C166.531903,118.380712 165.412615,119.5 164.031903,119.5 L164.031903,119.5 L153.69862,119.500302 C153.233598,121.353849 152.648681,123.166398 151.951547,124.931529 L162.27225,130.829392 L162.421487,130.922027 C163.514106,131.663144 163.851493,133.104629 163.202511,134.240347 C162.517486,135.439141 160.990349,135.855633 159.791556,135.170608 L159.791556,135.170608 L149.848681,129.490071 C148.893819,131.290208 147.81738,133.029136 146.628871,134.698903 L152.161049,143.689756 L152.251606,143.850341 C152.849347,145.024255 152.45311,146.445476 151.342147,147.129146 C150.166252,147.852773 148.626385,147.486138 147.902757,146.310244 L147.902757,146.310244 L143.31428,138.854711 C133.222168,150.196486 117.529877,157.440747 100,157.440747 C82.4810134,157.440747 66.7973294,150.205484 56.7045349,138.875844 L52.1291458,146.310244 C51.4055183,147.486138 49.8656512,147.852773 48.6897564,147.129146 C47.578793,146.445476 47.1825559,145.024255 47.7802967,143.850341 L47.8708542,143.689756 L53.3882551,134.722948 C52.1960465,133.050164 51.1163575,131.307876 50.158757,129.504087 L40.2403473,135.170608 C39.0415537,135.855633 37.5144171,135.439141 36.8293921,134.240347 C36.1804102,133.104629 36.5177973,131.663144 37.6104157,130.922027 L37.7596527,130.829392 L48.0543715,124.946507 C47.3546295,123.176652 46.767718,121.359092 46.30138,119.500302 L36,119.5 C34.6192881,119.5 33.5,118.380712 33.5,117 C33.5,115.688665 34.5130191,114.60282 35.8323739,114.505823 L36,114.5 L45.3553997,114.499848 C45.1206542,112.676805 45,110.821942 45,108.940747 C45,102.882694 46.2607238,96.9759235 48.6798491,91.451989 L45.3967871,70.5290747 C44.4548473,64.5274099 48.5565649,58.8985061 54.5582298,57.9565663 C56.1055214,57.7137244 57.6868325,57.8041065 59.1963639,58.2216623 L79.6275294,63.8731217 C86.05091,61.6158094 92.9361876,60.4407466 100,60.4407466 C106.554246,60.4407466 112.956445,61.4522627 119.006751,63.4126755 L119.79391,63.6737576 L139.507329,58.2216662 C141.016874,57.8041065 142.598185,57.7137244 144.145477,57.9565663 Z M142.453647,67.8234613 C142.359195,67.8223472 142.264763,67.8344471 142.17314,67.8597911 L119.401004,74.1578243 L117.234684,73.3703526 C111.822968,71.4454008 105.997626,70.4407466 100,70.4407466 C93.5791224,70.4407466 87.3575327,71.5923643 81.6338976,73.7885498 L80.0966494,74.3783991 L56.530364,67.859735 C56.3931326,67.821775 56.2493771,67.8135585 56.1087142,67.835635 C55.5631083,67.9212659 55.1902249,68.4329844 55.2758816,68.9787549 L59.0340294,92.9293854 L58.3592602,94.3327638 C56.1486651,98.9303377 55,103.864723 55,108.940747 C55,130.036926 75.0043912,147.440747 100,147.440747 C124.995609,147.440747 145,130.036926 145,108.940747 C145,103.23185 143.546396,97.7028643 140.769473,92.6384284 L139.949829,91.1435966 L143.414426,69.0695849 L143.433437,68.938186 C143.492091,68.4469477 143.176954,67.9892345 142.706273,67.8595941 L142.594992,67.835635 L142.453647,67.8234613 Z M100,116 C101.64776,116 103.417277,116.112378 105.308549,116.337135 L106.023482,116.426695 C107.118609,116.570787 107.889574,117.575372 107.745481,118.670498 C107.685647,119.125251 107.471322,119.54562 107.138426,119.861152 L106.267233,120.675345 C105.67243,121.221784 105.209459,121.623758 104.878321,121.88127 L103.970795,122.569001 C103.172672,123.159505 102.272157,123.725015 101.001813,123.924399 L101,129 C101,129.552285 100.552285,130 100,130 C99.4477153,130 99,129.552285 99,129 L98.9996985,123.919385 C97.4099544,123.651233 96.4829269,122.766967 95.5652814,122.072883 L95.4159515,121.961756 C95.0572162,121.699667 94.4687998,121.20153 93.6507025,120.467345 L92.9940801,119.872429 C92.1785539,119.127471 92.1213471,117.862449 92.866305,117.046922 C93.1850536,116.69798 93.6170763,116.47319 94.0857642,116.412416 C96.20612,116.137472 98.1775319,116 100,116 Z"
                id="路径"
                fill="#FFFFFF"
                fillRule="nonzero"
              ></path>
            </g>
          </g>
        </g>
      </svg>
    );
  };

  return (
    <>
      <Drawer
        placement="top"
        closable={false}
        onClose={onClose}
        visible={visible}
      >
        <div style={{ marginTop: '50px' }} />
        <Button
          style={{
            border: '1px solid black',
          }}
          onClick={() => {
            dispatch({
              type: 'globalLayout/load',
              payload: 'http://localhost:8000/#/editor',
            });
          }}
          type="link"
        >
          http://localhost:8000/#/editor
        </Button>
        <hr />
        <Input
          ref={inputRef}
          defaultValue="http://localhost:8000/#/"
          onPressEnter={() => {
            const { value } = inputRef.current.state;
            dispatch({
              type: 'globalLayout/load',
              payload: value,
            });
          }}
        />
      </Drawer>
      <Layout className="layout-container">
        <Layout>
          <Sider className="nav-sider" theme="light" collapsed={true}>
            <div className="setting-container">
              <SettingBtn
                onClick={() => {
                  dispatch({
                    type: 'globalLayout/settingMenu',
                  });
                }}
              />
            </div>
            <Avatar
              size="large"
              style={{
                backgroundColor: '#1f7688',
                marginLeft: '13px',
                marginRight: '13px',
                marginTop: '40px',
                marginBottom: '20px',
              }}
              icon={<Icon component={bannerSvg} />}
            />
            <Menu defaultSelectedKeys={['1']} mode="inline">
              <Menu.Item
                key="1"
                onClick={showDrawer}
                icon={<DownCircleOutlined />}
              >
                应用菜单
              </Menu.Item>
              <Menu.Item
                key="3"
                onClick={() => {
                  alert('todo 创建知识库');
                }}
                icon={<DesktopOutlined />}
              >
                创建知识库
              </Menu.Item>
            </Menu>
          </Sider>
          <Layout
            style={{
              marginLeft: '66px',
            }}
          >
            <Content>{children}</Content>
            <Footer className="global-footer">todo 这里做数据展示</Footer>
          </Layout>
        </Layout>
      </Layout>
    </>
  );
};

export default connect(
  ({ globalLayout }: { globalLayout: GlobalLayoutModelState }) => {
    return {
      globalLayout,
    };
  },
)(GlobalLayout);
